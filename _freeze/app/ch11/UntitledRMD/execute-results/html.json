{
  "hash": "ab6eae0f1c6889082924fb6d8dc62983",
  "result": {
    "markdown": "``` phyton\nimport streamlit as st\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import date\nimport random\nimport string\nimport base64\n\n# Function to generate random ID\ndef generate_random_ID():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))\n\n# Load data\n@st.cache\ndef load_data():\n    try:\n        data = pd.read_csv('data.csv', parse_dates=['Timestamp'])\n    except:\n        data = pd.DataFrame(columns=['ID', 'Timestamp', 'PreTest', 'Block1', 'Block2', 'Block3', 'Block4', 'Block5', 'Block6', 'PostTest', 'RetentionTest'])\n    return data\n\ndata = load_data()\n\n# Sidebar inputs\nst.sidebar.title(\"Motor Learning Performance Curve\")\npre_test = st.sidebar.number_input(\"Pre-test Score:\", min_value=0, max_value=100, value=None)\nblock1 = st.sidebar.number_input(\"Block 1 Average Score:\", min_value=0, max_value=15, value=None)\nblock2 = st.sidebar.number_input(\"Block 2 Average Score:\", min_value=0, max_value=15, value=None)\nblock3 = st.sidebar.number_input(\"Block 3 Average Score:\", min_value=0, max_value=15, value=None)\nblock4 = st.sidebar.number_input(\"Block 4 Average Score:\", min_value=0, max_value=15, value=None)\nblock5 = st.sidebar.number_input(\"Block 5 Average Score:\", min_value=0, max_value=15, value=None)\nblock6 = st.sidebar.number_input(\"Block 6 Average Score:\", min_value=0, max_value=15, value=None)\npost_test = st.sidebar.number_input(\"Post-test Score:\", min_value=0, max_value=15, value=None)\nretention_test = st.sidebar.number_input(\"Retention Test Score:\", min_value=0, max_value=15, value=None)\n\n# Buttons\nif st.sidebar.button(\"Submit\"):\n    new_data = {'ID': generate_random_ID(),\n                'Timestamp': pd.Timestamp.now(),\n                'PreTest': pre_test,\n                'Block1': block1,\n                'Block2': block2,\n                'Block3': block3,\n                'Block4': block4,\n                'Block5': block5,\n                'Block6': block6,\n                'PostTest': post_test,\n                'RetentionTest': retention_test}\n    data = data.append(new_data, ignore_index=True)\n    data.to_csv('data.csv', index=False)\n\nif st.sidebar.button(\"Reset\"):\n    pre_test = block1 = block2 = block3 = block4 = block5 = block6 = post_test = retention_test = None\n\n# Main panel\nst.title(\"Motor Learning Performance Curve\")\n\n# Date filter\nstart_date = st.date_input(\"Start Date:\", value=date.today() - pd.DateOffset(days=30))\nend_date = st.date_input(\"End Date:\", value=date.today())\n\n# Keyword filter\nfilter_keyword = st.text_input(\"Filter Data:\", value=\"\")\n\n# Filter data\nfiltered_data = data[(data['Timestamp'].dt.date >= start_date) & (data['Timestamp'].dt.date <= end_date)]\nif filter_keyword:\n    filtered_data = filtered_data[filtered_data.apply(lambda row: row.astype(str).str.contains(filter_keyword, case=False).any(), axis=1)]\n\n# Plot\nif not filtered_data.empty:\n    avg_data = filtered_data.mean()\n    trials = ['PreTest', 'Block1', 'Block2', 'Block3', 'Block4', 'Block5', 'Block6', 'PostTest', 'RetentionTest']\n    plt.plot(trials, avg_data[2:])\n    plt.scatter(trials, avg_data[2:])\n    plt.xticks(rotation=45)\n    plt.title('Performance Curve')\n    plt.xlabel('Trials')\n    plt.ylabel('Score')\n    st.pyplot(plt.gcf())\nelse:\n    st.write(\"No data available\")\n\n# Display data\nst.write(filtered_data)\n\n# Download data\nif st.button('Download Data'):\n    csv = data.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode()).decode()\n    href = f'<a href=\"data:file/csv;base64,{b64}\" download=\"data.csv\">Download CSV File</a>'\n    st.markdown(href, unsafe_allow_html=True)\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}